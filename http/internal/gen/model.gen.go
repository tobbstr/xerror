// Package gen provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.2.0 DO NOT EDIT.
package gen

import (
	"encoding/json"

	"github.com/oapi-codegen/runtime"
)

// Defines values for BadRequestDetailsType.
const (
	TypeGoogleapisComgoogleRpcBadRequest BadRequestDetailsType = "type.googleapis.com/google.rpc.BadRequest"
)

// Defines values for DebugInfoDetailsType.
const (
	TypeGoogleapisComgoogleRpcDebugInfo DebugInfoDetailsType = "type.googleapis.com/google.rpc.DebugInfo"
)

// Defines values for ErrorInfoDetailsType.
const (
	TypeGoogleapisComgoogleRpcErrorInfo ErrorInfoDetailsType = "type.googleapis.com/google.rpc.ErrorInfo"
)

// Defines values for PreconditionFailureDetailsType.
const (
	TypeGoogleapisComgoogleRpcPreconditionFailure PreconditionFailureDetailsType = "type.googleapis.com/google.rpc.PreconditionFailure"
)

// Defines values for RequestInfoDetailsType.
const (
	TypeGoogleapisComgoogleRpcRequestInfo RequestInfoDetailsType = "type.googleapis.com/google.rpc.RequestInfo"
)

// Defines values for ResourceInfoDetailsType.
const (
	TypeGoogleapisComgoogleRpcResourceInfo ResourceInfoDetailsType = "type.googleapis.com/google.rpc.ResourceInfo"
)

// BadRequestDetails Describes violations in a client request. This error type focuses on the syntactic aspects of the request.
type BadRequestDetails struct {
	FieldViolations []FieldViolation `json:"fieldViolations"`

	// Type The type of error detail.
	Type BadRequestDetailsType `json:"type"`
}

// BadRequestDetailsType The type of error detail.
type BadRequestDetailsType string

// DebugInfoDetails Describes additional debugging info.
type DebugInfoDetails struct {
	// Detail Additional debugging information provided by the server.
	Detail string `json:"detail"`

	// StackEntries The stack trace entries indicating where the error occurred.
	StackEntries *[]string `json:"stackEntries,omitempty"`

	// Type The type of error detail.
	Type DebugInfoDetailsType `json:"type"`
}

// DebugInfoDetailsType The type of error detail.
type DebugInfoDetailsType string

// Error The error schema for Google's JSON HTTP APIs. For more info: https://cloud.google.com/apis/design/errors#http_mapping.
type Error struct {
	// Code An HTTP status code that corresponds to `google.rpc.Status.code`
	Code    int                   `json:"code"`
	Details *[]Error_Details_Item `json:"details,omitempty"`

	// Message A human-readable description of the error
	Message string `json:"message"`

	// Status A machine-readable enum version of `google.rpc.Status.code`
	Status string `json:"status"`
}

// Error_Details_Item defines model for Error.details.Item.
type Error_Details_Item struct {
	union json.RawMessage
}

// ErrorInfoDetails Describes the cause of the error with structured details.
//
// Example of an error when contacting the "pubsub.googleapis.com" API when it
// is not enabled:
//
//	{ "reason": "API_DISABLED"
//	  "domain": "googleapis.com"
//	  "metadata": {
//	    "resource": "projects/123",
//	    "service": "pubsub.googleapis.com"
//	  }
//	}
//
// This response indicates that the pubsub.googleapis.com API is not enabled.
//
// Example of an error that is returned when attempting to create a Spanner
// instance in a region that is out of stock:
//
//	{ "reason": "STOCKOUT"
//	  "domain": "spanner.googleapis.com",
//	  "metadata": {
//	    "availableRegions": "us-central1,us-east2"
//	  }
//	}
type ErrorInfoDetails struct {
	// Domain The logical grouping to which the "reason" belongs. The error domain
	// is typically the registered service name of the tool or product that
	// generates the error. Example: "pubsub.googleapis.com". If the error is
	// generated by some common infrastructure, the error domain must be a
	// globally unique value that identifies the infrastructure. For Google API
	// infrastructure, the error domain is "googleapis.com".
	Domain string `json:"domain"`

	// Metadata Additional structured details about this error.
	//
	// Keys should match [a-zA-Z0-9-_] and be limited to 64 characters in
	// length. When identifying the current value of an exceeded limit, the units
	// should be contained in the key, not the value.  For example, rather than
	// {"instanceLimit": "100/request"}, should be returned as,
	// {"instanceLimitPerRequest": "100"}, if the client exceeds the number of
	// instances that can be created in a single (batch) request.
	Metadata map[string]string `json:"metadata"`

	// Reason The reason of the error. This is a constant value that identifies the
	// proximate cause of the error. Error reasons are unique within a particular
	// domain of errors. This should be at most 63 characters and match a
	// regular expression of `[A-Z][A-Z0-9_]+[A-Z0-9]`, which represents
	// UPPER_SNAKE_CASE.
	Reason string `json:"reason"`

	// Type The type of error detail.
	Type ErrorInfoDetailsType `json:"type"`
}

// ErrorInfoDetailsType The type of error detail.
type ErrorInfoDetailsType string

// ErrorResult defines model for ErrorResult.
type ErrorResult struct {
	// Error The error schema for Google's JSON HTTP APIs. For more info: https://cloud.google.com/apis/design/errors#http_mapping.
	Error Error `json:"error"`
}

// FieldViolation Describes a single bad request field.
type FieldViolation struct {
	// Description A description of why the request element is bad
	Description string `json:"description"`

	// Field Name of violated field
	//
	// Ex.
	// A path that leads to a field in the request body. The value will be a
	// sequence of dot-separated identifiers that identify a protocol buffer
	// field.
	//
	// Consider the following:
	//
	// ```
	// message CreateContactRequest {
	//   message EmailAddress {
	//     enum Type {
	//       TYPE_UNSPECIFIED = 0;
	//       HOME = 1;
	//       WORK = 2;
	//     }
	//
	//     optional string email = 1;
	//     repeated EmailType type = 2;
	//   }
	//
	//   string full_name = 1;
	//   repeated EmailAddress email_addresses = 2;
	// }
	// ```
	//
	// In this example, in proto `field` could take one of the following values:
	//
	//   - `full_name` for a violation in the `full_name` value
	//   - `email_addresses[1].email` for a violation in the `email` field of the
	//     first `email_addresses` message
	//   - `email_addresses[3].type[2]` for a violation in the second `type`
	//     value in the third `email_addresses` message.
	//
	// In JSON, the same values are represented as:
	//
	//   - `fullName` for a violation in the `fullName` value
	//   - `emailAddresses[1].email` for a violation in the `email` field of the
	//     first `emailAddresses` message
	//   - `emailAddresses[3].type[2]` for a violation in the second `type`
	//     value in the third `emailAddresses` message.
	Field string `json:"field"`
}

// PreconditionFailureDetails Describes what preconditions have failed.
type PreconditionFailureDetails struct {
	// Type The type of error detail.
	Type       PreconditionFailureDetailsType `json:"type"`
	Violations []PreconditionViolation        `json:"violations"`
}

// PreconditionFailureDetailsType The type of error detail.
type PreconditionFailureDetailsType string

// PreconditionViolation Describes a single precondition failure.
type PreconditionViolation struct {
	// Description A description of how the precondition failed. Developers can use this
	// description to understand how to fix the failure.
	//
	// For example: "Battery tracking version not accepted".
	Description string `json:"description"`

	// Subject The subject, relative to the type, that failed.
	// For example, `voiapp.io/battery/v1/battery-trackings/b21df375-59c9-4561-93bc-2a095b6f9a90` relative to
	// the "ErrVersionMismatch" type would indicate which battery tracking has a version mismatch conflict.
	Subject string `json:"subject"`

	// Type The type of violation. Is a service-specific
	// enum type to define the supported precondition violation subjects. For
	// example, "ErrVersionMismatch" for "Battery tracking version mismatch".
	Type string `json:"type"`
}

// RequestInfoDetails Contains metadata about the request that clients can attach when filing a bug or providing other forms of feedback.
type RequestInfoDetails struct {
	// RequestId An opaque string that should only be interpreted by the service generating
	// it. For example, it can be used to identify requests in the service's logs.
	RequestId string `json:"requestId"`

	// ServingData Any data that was used to serve this request. For example, an encrypted
	// stack trace that can be sent back to the service provider for debugging.
	ServingData string `json:"servingData"`

	// Type The type of error detail.
	Type RequestInfoDetailsType `json:"type"`
}

// RequestInfoDetailsType The type of error detail.
type RequestInfoDetailsType string

// ResourceInfo Describes the resource that is being accessed.
type ResourceInfo struct {
	// Description Describes what error is encountered when accessing this resource. For example, updating a cloud project may
	// require the `writer` permission on the developer console project.
	Description string `json:"description"`

	// Owner The owner of the resource (optional).
	// For example, "user:<owner email>".
	Owner *string `json:"owner,omitempty"`

	// ResourceName The full resource name of the resource being accessed. For example, a shared calendar
	// name: "example.com_4fghdhgsrgh@group.calendar.google.com", if the current error is
	// [google.rpc.Code.PERMISSION_DENIED][google.rpc.Code.PERMISSION_DENIED].
	// Or, for a Google Cloud Storage bucket, "projects/<my-project-id>/buckets/<my-bucket-name>".
	ResourceName string `json:"resourceName"`

	// ResourceType A name for the type of resource being accessed, e.g. "sql table", "cloud storage bucket", "file",
	// "Google calendar"; or the type URL of the resource: e.g. "type.googleapis.com/google.pubsub.v1.Topic".
	ResourceType string `json:"resourceType"`
}

// ResourceInfoDetails Describes resources in a client request.
type ResourceInfoDetails struct {
	ResourceInfos []ResourceInfo `json:"resourceInfos"`

	// Type The type of error detail.
	Type ResourceInfoDetailsType `json:"type"`
}

// ResourceInfoDetailsType The type of error detail.
type ResourceInfoDetailsType string

// AsBadRequestDetails returns the union data inside the Error_Details_Item as a BadRequestDetails
func (t Error_Details_Item) AsBadRequestDetails() (BadRequestDetails, error) {
	var body BadRequestDetails
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromBadRequestDetails overwrites any union data inside the Error_Details_Item as the provided BadRequestDetails
func (t *Error_Details_Item) FromBadRequestDetails(v BadRequestDetails) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeBadRequestDetails performs a merge with any union data inside the Error_Details_Item, using the provided BadRequestDetails
func (t *Error_Details_Item) MergeBadRequestDetails(v BadRequestDetails) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPreconditionFailureDetails returns the union data inside the Error_Details_Item as a PreconditionFailureDetails
func (t Error_Details_Item) AsPreconditionFailureDetails() (PreconditionFailureDetails, error) {
	var body PreconditionFailureDetails
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPreconditionFailureDetails overwrites any union data inside the Error_Details_Item as the provided PreconditionFailureDetails
func (t *Error_Details_Item) FromPreconditionFailureDetails(v PreconditionFailureDetails) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePreconditionFailureDetails performs a merge with any union data inside the Error_Details_Item, using the provided PreconditionFailureDetails
func (t *Error_Details_Item) MergePreconditionFailureDetails(v PreconditionFailureDetails) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsDebugInfoDetails returns the union data inside the Error_Details_Item as a DebugInfoDetails
func (t Error_Details_Item) AsDebugInfoDetails() (DebugInfoDetails, error) {
	var body DebugInfoDetails
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDebugInfoDetails overwrites any union data inside the Error_Details_Item as the provided DebugInfoDetails
func (t *Error_Details_Item) FromDebugInfoDetails(v DebugInfoDetails) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDebugInfoDetails performs a merge with any union data inside the Error_Details_Item, using the provided DebugInfoDetails
func (t *Error_Details_Item) MergeDebugInfoDetails(v DebugInfoDetails) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsResourceInfoDetails returns the union data inside the Error_Details_Item as a ResourceInfoDetails
func (t Error_Details_Item) AsResourceInfoDetails() (ResourceInfoDetails, error) {
	var body ResourceInfoDetails
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromResourceInfoDetails overwrites any union data inside the Error_Details_Item as the provided ResourceInfoDetails
func (t *Error_Details_Item) FromResourceInfoDetails(v ResourceInfoDetails) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeResourceInfoDetails performs a merge with any union data inside the Error_Details_Item, using the provided ResourceInfoDetails
func (t *Error_Details_Item) MergeResourceInfoDetails(v ResourceInfoDetails) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsErrorInfoDetails returns the union data inside the Error_Details_Item as a ErrorInfoDetails
func (t Error_Details_Item) AsErrorInfoDetails() (ErrorInfoDetails, error) {
	var body ErrorInfoDetails
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromErrorInfoDetails overwrites any union data inside the Error_Details_Item as the provided ErrorInfoDetails
func (t *Error_Details_Item) FromErrorInfoDetails(v ErrorInfoDetails) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeErrorInfoDetails performs a merge with any union data inside the Error_Details_Item, using the provided ErrorInfoDetails
func (t *Error_Details_Item) MergeErrorInfoDetails(v ErrorInfoDetails) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsRequestInfoDetails returns the union data inside the Error_Details_Item as a RequestInfoDetails
func (t Error_Details_Item) AsRequestInfoDetails() (RequestInfoDetails, error) {
	var body RequestInfoDetails
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromRequestInfoDetails overwrites any union data inside the Error_Details_Item as the provided RequestInfoDetails
func (t *Error_Details_Item) FromRequestInfoDetails(v RequestInfoDetails) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeRequestInfoDetails performs a merge with any union data inside the Error_Details_Item, using the provided RequestInfoDetails
func (t *Error_Details_Item) MergeRequestInfoDetails(v RequestInfoDetails) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t Error_Details_Item) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *Error_Details_Item) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}
